{
  "metadata": {
    "name": "Lesson 4: Functions",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1  style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1 style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "<h1>Functions: Lesson 4 of 10 in Introduction to JavaScript</h1>\n<h2>Overview</h2>\n\nIn <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\">Lesson 3</a>, we explored control flow using conditional statements and loops. Now, let's shift our focus to functions, a crucial concept in JavaScript for organizing code, promoting reusability, and enhancing modularity.\n\n<h2>Functions in JavaScript</h2>\n\n<h3> What is a Function?</h3>\n\nA function is a reusable block of code that performs a specific task or calculates a value. Functions help break down complex programs into smaller, manageable pieces.\n\n<h3>Function Declaration</h3>\n\nThe basic syntax for declaring a function is as follows:\n\n<pre>\nfunction greet() {\n  console.log(\"Hello, world!\");\n}</pre>\n\n</h3>Function Invocation</h3>\n\nTo execute a function, you need to use it:\n\n<pre>\ngreet(); // Outputs: Hello, world! </pre>\n\n<b>Important note</b>: Scribbler uses <i>show</i> function to display the text. This is not a standard JavaScript function. <i>console.log</i> is a standard JavaScript function that prints the text in the console of the environment.\n",
      "status": "",
      "output": "<h1>Functions: Lesson 4 of 10 in Introduction to JavaScript</h1>\n<h2>Overview</h2>\n\nIn <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\">Lesson 3</a>, we explored control flow using conditional statements and loops. Now, let's shift our focus to functions, a crucial concept in JavaScript for organizing code, promoting reusability, and enhancing modularity.\n\n<h2>Functions in JavaScript</h2>\n\n<h3> What is a Function?</h3>\n\nA function is a reusable block of code that performs a specific task or calculates a value. Functions help break down complex programs into smaller, manageable pieces.\n\n<h3>Function Declaration</h3>\n\nThe basic syntax for declaring a function is as follows:\n\n<pre>function greet() {\n  console.log(\"Hello, world!\");\n}</pre>\n\nFunction Invocation\n\nTo execute a function, you need to use it:\n\n<pre>greet(); // Outputs: Hello, world! </pre>\n\n<b>Important note</b>: Scribbler uses <i>show</i> function to display the text. This is not a standard JavaScript function. <i>console.log</i> is a standard JavaScript function that prints the text in the console of the environment.\n",
      "type": "html"
    },
    {
      "code": "\nfunction greet() {\n  console.log(\"Hello, world!\");\n  scrib.show(\"Hello, world!\");\n}\ngreet();\n",
      "status": "[1]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Hello, world! <br>",
      "type": "code"
    },
    {
      "code": "<h3>Parameters and Arguments</h3>\n\nFunctions can accept parameters, allowing them to receive input values. Arguments are the actual values passed to the function when it is called.\n\n<pre>function greetWithName(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreetWithName(\"Alice\"); // Outputs: Hello, Alice!</pre>\n\nRemember `show` is a Scribbler function in other environments you can use console.log.\nIn the code below, why dont you use your name instead of \"Alice\" and see if it works. Press play (►) button or Ctrl-Enter for running the code in the cell.",
      "status": "",
      "output": "<h3>Parameters and Arguments</h3>\n\nFunctions can accept parameters, allowing them to receive input values. Arguments are the actual values passed to the function when it is called.\n\n<pre>function greetWithName(name) {\n  console.log(\"Hello, \" + name + \"!\");\n}\n\ngreetWithName(\"Alice\"); // Outputs: Hello, Alice!</pre>\n\nRemember `show` is a Scribbler function in other environments you can use console.log.\nIn the code below, why dont you use your name instead of \"Alice\" and see if it works. Press play (►) button or Ctrl-Enter for running the code in the cell.",
      "type": "html"
    },
    {
      "code": "function greetWithName(name) {\n  console.log(\"Hello, \" + name + \"!\");\n  scrib.show(\"Hello, \" + name + \"!\"); \n  \n}\n\ngreetWithName(\"Alice\"); // Outputs: Hello, Alice!",
      "status": "[3]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Hello, Alice! <br>",
      "type": "code"
    },
    {
      "code": "<h3>Return Statement</h3>\n\nA function can return a value using the `return` statement. The returned value can be used elsewhere in your code.\n\n<pre>\nfunction addNumbers(a, b) {\n  return a + b;\n}\n\nlet sum = addNumbers(3, 7);\nconsole.log(\"Sum:\", sum); // Outputs: Sum: 10</pre>\n\nIn the cells below change the values of numbers in line number 5 and see if it works.",
      "status": "",
      "output": "<h3>Return Statement</h3>\n\nA function can return a value using the `return` statement. The returned value can be used elsewhere in your code.\n\n<pre>function addNumbers(a, b) {\n  return a + b;\n}\n\nlet sum = addNumbers(3, 7);\nconsole.log(\"Sum:\", sum); // Outputs: Sum: 10</pre>\n\nIn the cells below change the values of numbers in line number 5 and see if it works.",
      "type": "html"
    },
    {
      "code": "function addNumbers(a, b) {\n  return a + b;\n}\n\nlet sum = addNumbers(3, 7);\nscrib.show(\"Sum:\", sum); // Outputs: Sum: 10",
      "status": "[4]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Sum: 10 <br>",
      "type": "code"
    },
    {
      "code": "<h2>Scope and Function Scope</h2>\n\n<h3>Global Scope</h3>\n\nVariables declared outside any function have global scope, making them accessible throughout the entire program.\n\n<pre>let globalVar = \"I am global\";\n\nfunction exampleFunction() {\n  console.log(globalVar); // Outputs: I am global\n}\nexampleFunction()\n</pre>\n\n<h3>Local Scope</h3>\n\nVariables declared inside a function have local scope and are only accessible within that function.\n\n<pre>function exampleFunction() {\n  let localVar = \"I am local\";\n  console.log(localVar);\n}\n\nexampleFunction(); // Outputs: I am local\nconsole.log(localVar); // ReferenceError: localVar is not defined</pre>\n\n",
      "status": "",
      "output": "<h2>Scope and Function Scope</h2>\n\n<h3>Global Scope</h3>\n\nVariables declared outside any function have global scope, making them accessible throughout the entire program.\n\n<pre>let globalVar = \"I am global\";\n\nfunction exampleFunction() {\n  console.log(globalVar); // Outputs: I am global\n}\nexampleFunction()\n</pre>\n\n<h3>Local Scope</h3>\n\nVariables declared inside a function have local scope and are only accessible within that function.\n\n<pre>function exampleFunction() {\n  let localVar = \"I am local\";\n  console.log(localVar);\n}\n\nexampleFunction(); // Outputs: I am local\nconsole.log(localVar); // ReferenceError: localVar is not defined</pre>\n\n",
      "type": "html"
    },
    {
      "code": "let globalVar = \"I am global\";\n\nfunction exampleFunction() {\n  scrib.show(globalVar); // Outputs: I am global\n}\nexampleFunction()",
      "status": "[6]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "I am global <br>",
      "type": "code"
    },
    {
      "code": "function exampleFunction() {\n  let localVar = \"I am local\";\n  show(\"Inside the function:\",localVar);\n}\n\nexampleFunction(); // Outputs: I am local\nscrib.show(localVar); // ReferenceError: localVar is not defined",
      "status": "[-]",
      "output": "<span style=\"color:orange\">Warning! show() is being deprecated. Use scrib.show().</span> <br>Inside the function: I am local <br><p class=\"error\">localVar is not defined</p>",
      "type": "code"
    },
    {
      "code": "<h2>More Examples</h2>\nLet's explore more examples where functions take inputs (parameters) and perform various tasks. These examples demonstrate how functions can take inputs (parameters) to perform specific tasks, providing flexibility and reusability in your JavaScript code.",
      "status": "",
      "output": "<h2>More Examples</h2>\nLet's explore more examples where functions take inputs (parameters) and perform various tasks. These examples demonstrate how functions can take inputs (parameters) to perform specific tasks, providing flexibility and reusability in your JavaScript code.",
      "type": "html"
    },
    {
      "code": "<h3>Example 1: Simple Addition</h3>\nThis example function takes two variables and returns the sum of the variables.\n",
      "status": "",
      "output": "<h3>Example 1: Simple Addition</h3>\nThis example function takes two variables and returns the sum of the variables.\n",
      "type": "html"
    },
    {
      "code": "function addNumbers(a, b) {\n  return a + b;\n}\n\nlet sum = addNumbers(5, 3);\nscrib.show(\"Sum:\", sum); ",
      "status": "[7]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Sum: 8 <br>",
      "type": "code"
    },
    {
      "code": "In the above cell bellow can you write the missing part of the code to make a function for multiplying to numbers?",
      "status": "",
      "output": "In the above cell bellow can you write the missing part of the code to make a function for multiplying to numbers?",
      "type": "html"
    },
    {
      "code": "function multiplyNumbers(a, b) {\n //Write your code here\n  \n}\n\nlet product = multiplyNumbers(5, 3);\nif(product==15){\n  scrib.show(\"Great it worked!\")\n}else{\n  scrib.show(\"Please try again..\");\n}",
      "status": "[9]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Please try again.. <br>",
      "type": "code"
    },
    {
      "code": "<h3>Example 2: Greeting with Custom Message</h3>\nThis example function takes a message and the name of a person and returns a message incorporating the name.",
      "status": "",
      "output": "<h3>Example 2: Greeting with Custom Message</h3>\nThis example function takes a message and the name of a person and returns a message incorporating the name.",
      "type": "html"
    },
    {
      "code": "function greet(message, name) {\n  scrib.show(message + \", \" + name + \"!\");\n}\n\ngreet(\"Good morning\", \"Alice\"); // Outputs: Good morning, Alice!\ngreet(\"Hello\", \"Bob\"); // Outputs: Hello, Bob!\n",
      "status": "[10]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Good morning, Alice! <br>Hello, Bob! <br>",
      "type": "code"
    },
    {
      "code": "<h3>Example 3: Finding the Maximum of Two Numbers</h3>\n",
      "status": "",
      "output": "<h3>Example 3: Finding the Maximum of Two Numbers</h3>\n",
      "type": "html"
    },
    {
      "code": "function findMax(num1, num2) {\n  if(num1 > num2){\n\treturn  num1;\n  }else{\n\treturn num2;\n  }\n}\n\nlet maximum = findMax(12, 8);\nscrib.show(\"Maximum:\", maximum); ",
      "status": "[11]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Maximum: 12 <br>",
      "type": "code"
    },
    {
      "code": "<h3>Example 4: Calculating Area of a Rectangle</h3>",
      "status": "",
      "output": "<h3>Example 4: Calculating Area of a Rectangle</h3>",
      "type": "html"
    },
    {
      "code": "function calculateRectangleArea(length, width) {\n  return length * width;\n}\n\nlet area = calculateRectangleArea(5, 10);\nscrib.show(\"Rectangle Area:\", area);",
      "status": "[12]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Rectangle Area: 50 <br>",
      "type": "code"
    },
    {
      "code": "<h3>Example 5: Checking if a Number is Even</h3>\nIn this example we will check if a number is even or odd. For this we will use an arithmetic operator '%'.  \n  <br>x % y gives the reminder after dividen x by y. and `==` is used to check if two values are equal. This operator gives a boolean value i.e. true or false.",
      "status": "",
      "output": "<h3>Example 5: Checking if a Number is Even</h3>\nIn this example we will check if a number is even or odd. For this we will use an arithmetic operator '%'.  \n  <br>x % y gives the reminder after dividen x by y. and `==` is used to check if two values are equal. This operator gives a boolean value i.e. true or false.",
      "type": "html"
    },
    {
      "code": "function isEven(number) {\n  let reminder=number % 2;\n  let isEven = (reminder==0);\n  return isEven; //% is reminder\n}\n\nscrib.show(\"Is 10 even?\", isEven(10)); \nscrib.show(\"Is 7 even?\", isEven(7));  ",
      "status": "[14]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Is 10 even? true <br>Is 7 even? false <br>",
      "type": "code"
    },
    {
      "code": "<h3>Example 6: Calculating Sum of First n numbers</h3>\nIn this example we will calculate the sum first `n` numbers using functions and a for loop. The `n` can be changed and revaluated.",
      "status": "",
      "output": "<h3>Example 6: Calculating Sum of First n numbers</h3>\nIn this example we will calculate the sum first `n` numbers using functions and a for loop. The `n` can be changed and revaluated.",
      "type": "html"
    },
    {
      "code": "function sumFirstN(n){\n  let sum =0;\n  for(let i=1;i<=n;i++){\n  \tsum=sum+i;\n  }\n  return sum;\n}\nscrib.show(\"Sum of first 10 numbers:\",sumFirstN(10));\nscrib.show(\"Sum of first 100 numbers:\",sumFirstN(100));\nscrib.show(\"Sum of first 1000 numbers:\",sumFirstN(1000));\n",
      "status": "[16]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Sum of first 10 numbers: 55 <br>Sum of first 100 numbers: 5050 <br>Sum of first 1000 numbers: 500500 <br>",
      "type": "code"
    },
    {
      "code": "<h2>Experiment</h2>\nTry to build a function that calculates the sum of even numbers only in the first `n` numbers. You will have to combine the concepts of function, for loop, if statement and the operator % to do that.",
      "status": "",
      "output": "<h2>Experiment</h2>\nTry to build a function that calculates the sum of even numbers only in the first `n` numbers. You will have to combine the concepts of function, for loop, if statement and the operator % to do that.",
      "type": "html"
    },
    {
      "code": "function sumOfEvenNumbers(n){\n  let sum=0;\n\n  for(let i=1;i<=100;i=i+1){\n\t//Write your code here, to update the sum\n  }\n\t//Write your code here to return the sum\n\n\t//End of code\n}\n\nscrib.show(\"Sum of even numbers less than 100 is:\",sumOfEvenNumbers(10)) //this should print 30\nscrib.show(\"Sum of even numbers less than 100 is:\",sumOfEvenNumbers(100)) //this should print 2550\nscrib.show(\"Sum of even numbers less than 100 is:\",sumOfEvenNumbers(1000)) //this should print 250500\n\n",
      "status": "[17]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "Sum of even numbers less than 100 is: undefined <br>Sum of even numbers less than 100 is: undefined <br>Sum of even numbers less than 100 is: undefined <br>",
      "type": "code"
    },
    {
      "code": "<details>\n  <summary><h3>Click for Solution</h3>Copy this code in the above cell and see if it works.\n</summary>\n  <pre id='solution1'>\nfunction sumOfEvenNumbers(n){\nlet sum=0;\n  \nfor(let i=1;i<=100;i=i+1){\n  if(i%2==2){\n\tsum=sum+i;\n  }\n}\n  return sum;\n}\n<pre>\n</details>\n",
      "status": "",
      "output": "<details>\n  <summary><h3>Click for Solution</h3>Copy this code in the above cell and see if it works.\n</summary>\n  <pre id=\"solution1\">function sumOfEvenNumbers(n){\nlet sum=0;\n  \nfor(let i=1;i&lt;=100;i=i+1){\n  if(i%2==2){\n\tsum=sum+i;\n  }\n}\n  return sum;\n}\n<pre></pre></pre></details>\n",
      "type": "html"
    },
    {
      "code": "The code below is not working as expected. Please correct and try.",
      "status": "",
      "output": "The code below is not working as expected. Please correct and try.",
      "type": "html"
    },
    {
      "code": "let x=1;\nlet y=2;\n\nfunction greaterNumber(num1,num2){\n  if(x>y) {\n\t\treturn x;\n  }\n  else{\n\treturn y;\n  }\n}\n\nscrib.show(\"Greater number between 1 and 2 is:\")\nscrib.show(greaterNumber(1,2));  //This shows correctly\n\n\nscrib.show(\"Greater number between 10 and 100 is:\")\nscrib.show(greaterNumber(10,100)); //This is incorrect. Please change the code in the funciton to make this work.",
      "status": "[18]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Greater number between 1 and 2 is: <br>2 <br>Greater number between 10 and 100 is: <br>2 <br>",
      "type": "code"
    },
    {
      "code": "<details>\n  <summary><h3>Click for Solution</h3>\n</summary>\nHint: use `num1` and `num2` instead of `x` and `y` inside the function.\n  <pre id='solution1'>\nfunction greaterNumber(num1,num2){\n  if(num1>num2) {\n\t\treturn num1;\n  }\n  else{\n\treturn num2;\n  }\n}\n<pre>\n</details>\n",
      "status": "",
      "output": "<details>\n  <summary><h3>Click for Solution</h3>\n</summary>\nHint: use `num1` and `num2` instead of `x` and `y` inside the function.\n  <pre id=\"solution1\">function greaterNumber(num1,num2){\n  if(num1&gt;num2) {\n\t\treturn num1;\n  }\n  else{\n\treturn num2;\n  }\n}\n<pre></pre></pre></details>\n",
      "type": "html"
    },
    {
      "code": "<h2>Summary</h2>\n<ul>\n  <li>Functions are reusable blocks of code.</li>\n <li>They can take parameters as input and return a value using the `return` statement.</li>\n <li>Variables inside functions have local scope, while those declared outside have global scope.</li>\n <li>Functions promote code organization, modularity, and reusability.</li>\n</ul>\nIn the next lesson, we'll explore more advanced topics, including arrays and objects in JavaScript. Stay tuned!\n",
      "status": "",
      "output": "<h2>Summary</h2>\n<ul>\n  <li>Functions are reusable blocks of code.</li>\n <li>They can take parameters as input and return a value using the `return` statement.</li>\n <li>Variables inside functions have local scope, while those declared outside have global scope.</li>\n <li>Functions promote code organization, modularity, and reusability.</li>\n</ul>\nIn the next lesson, we'll explore more advanced topics, including arrays and objects in JavaScript. Stay tuned!\n",
      "type": "html"
    },
    {
      "code": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5: Objects</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-6a.jsnb\" target=\"_blank\">Lesson 6: Arrays Part A</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Lesson 6: Arrays Part B</a></li>\n\n\t</ul>",
      "status": "",
      "output": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5: Objects</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-6a.jsnb\" target=\"_blank\">Lesson 6: Arrays Part A</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Lesson 6: Arrays Part B</a></li>\n\n\t</ul>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}