{
  "metadata": {
    "name": "Lesson 10: Scripts, Modules and APIs",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1  style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1 style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "<h1>Scripts, Modules and APIs: Lesson 10 of 10</h1>",
      "status": "",
      "output": "<h1>Scripts, Modules and APIs: Lesson 10 of 10</h1>",
      "type": "html"
    },
    {
      "code": "<h2>Overview</h2>\nIn the realm of web development, understanding how to effectively use scripts, modules, and APIs is crucial. This chapter delves into the fundamentals of these components, their roles in modern web development, and how they interact to create dynamic and interactive web applications.\n<h3>Scripts and Modules</h3>\nScripts and modules are both essential in organizing and executing JavaScript code, yet they serve distinct purposes. Scripts typically encompass standalone JavaScript files included directly within HTML documents. They often consist of functions and variables intended for global use. On the other hand, modules encapsulate reusable code with clearly defined interfaces, promoting modularity and encapsulation. Modules employ the `import` and `export` statements to define dependencies and export functionality.\n<br>Scripts and modules can be used to load libraries built by other or by yourself. \n<h3>Web APIs</h3>\nApplication Programming Interfaces (APIs) facilitate communication between different software applications, allowing them to interact and share data. A notable example of an API is the OpenWeather API, which provides access to weather data from around the world. Utilizing JavaScript's `fetch()` method, developers can query the API and retrieve real-time weather information based on geographic coordinates or location names.\n",
      "status": "",
      "output": "<h2>Overview</h2>\nIn the realm of web development, understanding how to effectively use scripts, modules, and APIs is crucial. This chapter delves into the fundamentals of these components, their roles in modern web development, and how they interact to create dynamic and interactive web applications.\n<h3>Scripts and Modules</h3>\nScripts and modules are both essential in organizing and executing JavaScript code, yet they serve distinct purposes. Scripts typically encompass standalone JavaScript files included directly within HTML documents. They often consist of functions and variables intended for global use. On the other hand, modules encapsulate reusable code with clearly defined interfaces, promoting modularity and encapsulation. Modules employ the `import` and `export` statements to define dependencies and export functionality.\n<br>Scripts and modules can be used to load libraries built by other or by yourself. \n<h3>Web APIs</h3>\nApplication Programming Interfaces (APIs) facilitate communication between different software applications, allowing them to interact and share data. A notable example of an API is the OpenWeather API, which provides access to weather data from around the world. Utilizing JavaScript's `fetch()` method, developers can query the API and retrieve real-time weather information based on geographic coordinates or location names.\n",
      "type": "html"
    },
    {
      "code": "<h2>Loading a Script</h2>\nExternal scripts can be loaded into an HTML document using the &lt;script&gt; tag. Here's how you can load an external JavaScript file named externalScript.js:\n<pre>\n&lt;script src=\"link/to/externalScript.js\" > &lt/script> \n</pre>\nA popular libary that people use to make JavaScript coding easy is jQuery. jQuery is a fast, small, and feature-rich JavaScript library. It simplifies various tasks in web development such as HTML document traversal and manipulation, event handling, animation, and AJAX (asynchronous JavaScript and XML) interactions. jQuery can be loaded like this in HTML:\n<pre>\n&lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" > &lt/script> \n</pre>",
      "status": "",
      "output": "<h2>Loading a Script</h2>\nExternal scripts can be loaded into an HTML document using the &lt;script&gt; tag. Here's how you can load an external JavaScript file named externalScript.js:\n<pre>&lt;script src=\"link/to/externalScript.js\" &gt; &lt;/script&gt; \n</pre>\nA popular libary that people use to make JavaScript coding easy is jQuery. jQuery is a fast, small, and feature-rich JavaScript library. It simplifies various tasks in web development such as HTML document traversal and manipulation, event handling, animation, and AJAX (asynchronous JavaScript and XML) interactions. jQuery can be loaded like this in HTML:\n<pre>&lt;script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" &gt; &lt;/script&gt; \n</pre>",
      "type": "html"
    },
    {
      "code": "<h2>Loading Modules</h2>\n<h3>Static Import</h3>\nModules help in keeping code clean and not loading the system without \"polluting\" the namespace and memory. As of jQuery version 3.0, jQuery officially supports being loaded as an ES6 module. This means you can import jQuery as a module in your JavaScript code using the import statement. This is how it can be done:\n<pre>\n&lt;script type=\"module\">\n  import $ from \"https://code.jquery.com/jquery-3.6.0.min.js\" ;\n  \n  &lt/script> \n</pre>\nIn this example:\n<br>- We use the &ltscript type=\"module\"> tag to indicate that we're loading a JavaScript module.\n<br>- Inside the module script, we use the import statement to import jQuery from the CDN URL directly.\n<br>- This is called static import, where the module is loaded when the HTML page is loaded.\n<br>- You can use jQuery functionality by calling it using the function $ (I know it is an odd name for a function. But jQuery chose it, not me).\n<h3>Dynamic Import</h3>\nYou can also import modules dynamically using the import() function, which is a feature of latest JavaScript modules that allows for dynamic module loading. This loads the module asynchronously. <br>Here's how you can do it.\n<pre>\n  import(\"link/to/module.js\")\n\t.then(module=>{\n\t\t  //Do something with the imported value\n  \t\t\tlet \n\t\t  })\n\t.catch(error => {\n\t  // Handle errors\n\t});\n </pre>\nIn the cell below we load jQuery dynamically and change the background color of the document to red. Run the next cell to see the imact. The fucntion 'css' is a special jQuery function used to change styles easily.",
      "status": "",
      "output": "<h2>Loading Modules</h2>\n<h3>Static Import</h3>\nModules help in keeping code clean and not loading the system without \"polluting\" the namespace and memory. As of jQuery version 3.0, jQuery officially supports being loaded as an ES6 module. This means you can import jQuery as a module in your JavaScript code using the import statement. This is how it can be done:\n<pre>&lt;script type=\"module\"&gt;\n  import $ from \"https://code.jquery.com/jquery-3.6.0.min.js\" ;\n  \n  &lt;/script&gt; \n</pre>\nIn this example:\n<br>- We use the &lt;script type=\"module\"&gt; tag to indicate that we're loading a JavaScript module.\n<br>- Inside the module script, we use the import statement to import jQuery from the CDN URL directly.\n<br>- This is called static import, where the module is loaded when the HTML page is loaded.\n<br>- You can use jQuery functionality by calling it using the function $ (I know it is an odd name for a function. But jQuery chose it, not me).\n<h3>Dynamic Import</h3>\nYou can also import modules dynamically using the import() function, which is a feature of latest JavaScript modules that allows for dynamic module loading. This loads the module asynchronously. <br>Here's how you can do it.\n<pre>  import(\"link/to/module.js\")\n\t.then(module=&gt;{\n\t\t  //Do something with the imported value\n  \t\t\tlet \n\t\t  })\n\t.catch(error =&gt; {\n\t  // Handle errors\n\t});\n </pre>\nIn the cell below we load jQuery dynamically and change the background color of the document to red. Run the next cell to see the imact. The fucntion 'css' is a special jQuery function used to change styles easily.",
      "type": "html"
    },
    {
      "code": "import('https://code.jquery.com/jquery-3.6.0.min.js')\n            .then(() => {\n                // jQuery loaded successfully\n  \t\t\t\t\n                    // jQuery code here\n                    jQuery('body').css('background-color', 'white');\n\n            })\n            .catch(error => {\n                // Handle errors if jQuery fails to load\n                scrib.show('Failed to load jQuery:', error.message);\n            });",
      "status": "[39]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "{} <br>",
      "type": "code"
    },
    {
      "code": "<h3>Using D3</h3>\nD3.js (Data-Driven Documents) is another popular JavaScript library used for data visualization. Like jQuery, you can dynamically load D3.js using dynamic import. Below is an example. In this example we load D3 and draw a circle using it.",
      "status": "",
      "output": "<h3>Using D3</h3>\nD3.js (Data-Driven Documents) is another popular JavaScript library used for data visualization. Like jQuery, you can dynamically load D3.js using dynamic import. Below is an example. In this example we load D3 and draw a circle using it.",
      "type": "html"
    },
    {
      "code": "scrib.show(\"<div id='d3-test'></div>\")\nimport('https://d3js.org/d3.v7.min.js')\n            .then(() => {\n                // D3.js loaded successfully\n                const svg = d3.select('#d3-test')\n                    .append('svg')\n                    .attr('width', 200)\n                    .attr('height', 200);\n\n                svg.append('circle')\n                    .attr('cx', 100)\n                    .attr('cy', 100)\n                    .attr('r', 50)\n                    .attr('fill', 'blue');\n            })\n            .catch(error => {\n                // Handle errors if D3.js fails to load\n                console.error('Failed to load D3.js:', error);\n            });",
      "status": "[50]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "<div id=\"d3-test\"><svg width=\"200\" height=\"200\"><circle cx=\"100\" cy=\"100\" r=\"50\" fill=\"blue\"></circle></svg></div> <br>{} <br>",
      "type": "code"
    },
    {
      "code": "<h2>Web APIs</h2>\nApplication Programming Interfaces (APIs) facilitate communication between different software applications, allowing them to interact and share data. Asynchronous function fetch can be used to access APIs. Typically APIs respond with an object converted as a text called JSON (short form for JavaScript Object Notation). This JSON text can be converted using \n<pre>\n   fetch('https://api.example.com/data')\n       .then(response => {\n          return response.json();\n       })\n       .then(data => {\n            //Do something with the data\n       })\n       .catch(error => {\n  \t\t   //Handle errors\n           console.error('There was a problem with the fetch operation:', error);\n       });\n</pre>\n\n\n",
      "status": "",
      "output": "<h2>Web APIs</h2>\nApplication Programming Interfaces (APIs) facilitate communication between different software applications, allowing them to interact and share data. Asynchronous function fetch can be used to access APIs. Typically APIs respond with an object converted as a text called JSON (short form for JavaScript Object Notation). This JSON text can be converted using \n<pre>   fetch('https://api.example.com/data')\n       .then(response =&gt; {\n          return response.json();\n       })\n       .then(data =&gt; {\n            //Do something with the data\n       })\n       .catch(error =&gt; {\n  \t\t   //Handle errors\n           console.error('There was a problem with the fetch operation:', error);\n       });\n</pre>\n\n\n",
      "type": "html"
    },
    {
      "code": "<h3>Example</h3>\nIn the example below, we will use a test API (jsonplaceholder) to get user details. We will use forEach loop to get the name and email of each user. We will show these using scrib.show. jsonplaceholder is free to use dummy API for testing purposes.",
      "status": "",
      "output": "<h3>Example</h3>\nIn the example below, we will use a test API (jsonplaceholder) to get user details. We will use forEach loop to get the name and email of each user. We will show these using scrib.show. jsonplaceholder is free to use dummy API for testing purposes.",
      "type": "html"
    },
    {
      "code": "\n   fetch('https://jsonplaceholder.typicode.com/users')\n       .then(response => {\n          return response.json();\n       })\n       .then(data => {\n            data.forEach(function(user){\n\t\t\t  scrib.show(user.name,user.email);\n\t\t\t})\n       })\n       .catch(error => {\n  \t\t   //Handle errors\n           console.error('There was a problem with the fetch operation:', error);\n       });\n",
      "status": "[68]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "{} <br>Leanne Graham Sincere@april.biz <br>Ervin Howell Shanna@melissa.tv <br>Clementine Bauch Nathan@yesenia.net <br>Patricia Lebsack Julianne.OConner@kory.org <br>Chelsey Dietrich Lucio_Hettinger@annie.ca <br>Mrs. Dennis Schulist Karley_Dach@jasper.info <br>Kurtis Weissnat Telly.Hoeger@billy.biz <br>Nicholas Runolfsdottir V Sherwood@rosamond.me <br>Glenna Reichert Chaim_McDermott@dana.io <br>Clementina DuBuque Rey.Padberg@karina.biz <br>",
      "type": "code"
    },
    {
      "code": "<h3>Experiment</h3>\nOther than name and email, the data also has other fields including phone number, address etc. Can use scrib.show(user) to show all data. Later you can pick and choose a few elements.",
      "status": "",
      "output": "<h3>Experiment</h3>\nOther than name and email, the data also has other fields including phone number, address etc. Can use scrib.show(user) to show all data. Later you can pick and choose a few elements.",
      "type": "html"
    },
    {
      "code": "<h3>API with Authentication</h3>\nA notable example of an API is the OpenWeather API, which provides access to weather data from around the world. Utilizing JavaScript's fetch() method, developers can query the API and retrieve real-time weather information based on geographic coordinates or location names. It requires and API key to run. You can get the key by signing in here: <a href=\"https://home.openweathermap.org/users/sign_in\">https://home.openweathermap.org/users/sign_in</a>. Replace the API key from the site and paste it in the first line in the cell below to get weather of London.\n",
      "status": "",
      "output": "<h3>API with Authentication</h3>\nA notable example of an API is the OpenWeather API, which provides access to weather data from around the world. Utilizing JavaScript's fetch() method, developers can query the API and retrieve real-time weather information based on geographic coordinates or location names. It requires and API key to run. You can get the key by signing in here: <a href=\"https://home.openweathermap.org/users/sign_in\">https://home.openweathermap.org/users/sign_in</a>. Replace the API key from the site and paste it in the first line in the cell below to get weather of London.\n",
      "type": "html"
    },
    {
      "code": "const YOUR_API_KEY='get a key and paste here';\nfetch('https://api.openweathermap.org/data/2.5/weather?q=London&appid='+YOUR_API_KEY)\n  .then(response => {\n    return response.json();\n  })\n  .then(data => {\n    scrib.show(data);\n  })\n  .catch(error => {\n    scrib.show('There was a problem with the fetch operation:', error);\n  });\n",
      "status": "[60]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "{} <br>{\n  \"cod\": 401,\n  \"message\": \"Invalid API key. Please see https://openweathermap.org/faq#error401 for more info.\"\n} <br>",
      "type": "code"
    },
    {
      "code": "<h2>Summary</h2>\nThis chapter provided a comprehensive exploration of scripts, modules, and APIs in web development. It elucidated the differences between scripts and modules, emphasizing the modular nature of the latter. Additionally, it showcased the practical implementation of APIs, exemplified by the OpenWeather API, demonstrating how developers can leverage external data sources to enrich web applications. By mastering these concepts, developers can create robust and interconnected web experiences that cater to the dynamic needs of users.",
      "status": "",
      "output": "<h2>Summary</h2>\nThis chapter provided a comprehensive exploration of scripts, modules, and APIs in web development. It elucidated the differences between scripts and modules, emphasizing the modular nature of the latter. Additionally, it showcased the practical implementation of APIs, exemplified by the OpenWeather API, demonstrating how developers can leverage external data sources to enrich web applications. By mastering these concepts, developers can create robust and interconnected web experiences that cater to the dynamic needs of users.",
      "type": "html"
    },
    {
      "code": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-9.jsnb\" target=\"_blank\">Lesson 9:  Try...Catch and Asynchronous Programming</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-bonus.jsnb\" target=\"_blank\">Bonus Lesson:  Putting it all Together</a></li>\n  \n  </ul>",
      "status": "",
      "output": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-9.jsnb\" target=\"_blank\">Lesson 9:  Try...Catch and Asynchronous Programming</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-bonus.jsnb\" target=\"_blank\">Bonus Lesson:  Putting it all Together</a></li>\n  \n  </ul>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}