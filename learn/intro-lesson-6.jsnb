{
  "metadata": {
    "name": "Lesson 6: Arrays and Array Methods<br>",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1  style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1 style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "<h1>Arrays and Array Methods: Lesson 6 of 10</h1>",
      "status": "",
      "output": "<h1>Arrays and Array Methods: Lesson 6 of 10</h1>",
      "type": "html"
    },
    {
      "code": "<h2> Overview</h2>\n\nIn <a href='https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb' target='_blank'>Lesson 5</a>, we explored objects and the dynamic nature of the `this` keyword within the context of objects. Now, let's shift our focus to arrays, which are versatile data structures that allow you to store and manipulate collections of values. Additionally, we'll delve into various array methods for efficient data manipulation.\n\n<h3>Introduction to Arrays</h3>\n\nArrays are ordered lists that can hold multiple values of different data types. They are created using square brackets `[]`.\n\n<pre>\nlet fruits = [\"Apple\", \"Banana\", \"Orange\"];\n</pre>\n\n<h3>Accessing and Modifying Array Elements</h3>\n\nArray elements are accessed using indexes, and modifications can be made directly to the elements.\n<pre>\nlet firstFruit = fruits[0]; // Accessing the first element (index 0)\n\nfruits[1] = \"Grapes\"; // Modifying the second element\n</pre>\n<h3>Types of Elements</h3>\nArrays can contain any type of elements. They can have strings, numbers, null values, mixed types, objects, and even other arrays. The array below has mixed types if elements.\n<pre>\nlet marks = [50, 60, \"Unknown\", \"Absent\",100];\n</pre>\n<h3>Example</h3>\nIn the example below, try to modify the third element (referred by the index 2) to Grapes and then show it in the output. <br><b>Note:</b> `show` is a Scribbler function. in other environments you can use console.log.\n\n",
      "status": "",
      "output": "<h2> Overview</h2>\n\nIn <a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5</a>, we explored objects and the dynamic nature of the `this` keyword within the context of objects. Now, let's shift our focus to arrays, which are versatile data structures that allow you to store and manipulate collections of values. Additionally, we'll delve into various array methods for efficient data manipulation.\n\n<h3>Introduction to Arrays</h3>\n\nArrays are ordered lists that can hold multiple values of different data types. They are created using square brackets `[]`.\n\n<pre>let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n</pre>\n\n<h3>Accessing and Modifying Array Elements</h3>\n\nArray elements are accessed using indexes, and modifications can be made directly to the elements.\n<pre>let firstFruit = fruits[0]; // Accessing the first element (index 0)\n\nfruits[1] = \"Grapes\"; // Modifying the second element\n</pre>\n<h3>Types of Elements</h3>\nArrays can contain any type of elements. They can have strings, numbers, null values, mixed types, objects, and even other arrays. The array below has mixed types if elements.\n<pre>let marks = [50, 60, \"Unknown\", \"Absent\",100];\n</pre>\n<h3>Example</h3>\nIn the example below, try to modify the third element (referred by the index 2) to Grapes and then show it in the output. <br><b>Note:</b> `show` is a Scribbler function. in other environments you can use console.log.\n\n",
      "type": "html"
    },
    {
      "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\nlet firstFruit = fruits[0]; // Accessing the first element (index 0)\nconsole.log(\"First Fruit:\", firstFruit); // Outputs: First Fruit: Apple\nshow(firstFruit)\nfruits[1] = \"Grapes\"; // Modifying the second element\nshow(\"Updated Fruits:\", fruits); // Outputs: Updated Fruits: [\"Apple\", \"Grapes\", \"Orange\"]\n/* Write your code below to update last fruit and show it */\n",
      "status": "[3]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Apple <br>Updated Fruits: [\n  \"Apple\",\n  \"Grapes\",\n  \"Orange\"\n] <br>",
      "type": "code"
    },
    {
      "code": "In the cell below, we have created a function to check if the first element and second element are same or not. Try changing the array to see if it works properly for all scenarios.",
      "status": "",
      "output": "In the cell below, we have created a function to check if the first element and second element are same or not. Try changing the array to see if it works properly for all scenarios.",
      "type": "html"
    },
    {
      "code": "function compareFirstTwoElements(myArray){\n  if (myArray[0]==myArray[1]){\n\tshow(\"They are the same\");\n  }else{\n\tshow(\"They are not the same\");\n  }\n}\nlet testArray = [1,1];\ncompareFirstTwoElements(testArray);\n//Test this code by changing the testArray to following values:\n//[1,2]\n//['a','b']\n//['a','a']\n//['a','a','b']\n//[1,'1']\n//[1,'2',3]",
      "status": "[7]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "They are the same <br>",
      "type": "code"
    },
    {
      "code": "<h2>Array Methods</h2>\n\nJavaScript provides a variety of built-in methods for working with arrays. Let's explore some of these methods:\n<ol>\n<li>`push` and `pop` for adding and removing elements at the end</li>\n<li>`unshift` and `shift` for adding and removing elements at the start</li>\n<li>`splice` for adding and removing elements at the a specific position</li>\n<li>`slice` for getting a sub-segment of an array</li>\n<li>`concat` for merging two arrays</li>\n<li>`forEach` for executing a function on each element of the array</li>\n<li>`map` for creating a new array after applying a function on each element</li>\n\n</ol>\nLet us look at these in more detail with examples.",
      "status": "",
      "output": "<h2>Array Methods</h2>\n\nJavaScript provides a variety of built-in methods for working with arrays. Let's explore some of these methods:\n<ol>\n<li>`push` and `pop` for adding and removing elements at the end</li>\n<li>`unshift` and `shift` for adding and removing elements at the start</li>\n<li>`splice` for adding and removing elements at the a specific position</li>\n<li>`slice` for getting a sub-segment of an array</li>\n<li>`concat` for merging two arrays</li>\n<li>`forEach` for executing a function on each element of the array</li>\n<li>`map` for creating a new array after applying a function on each element</li>\n\n</ol>\nLet us look at these in more detail with examples.",
      "type": "html"
    },
    {
      "code": "<h3> 1. `push` and `pop`</h3>\n\n- `push`: array.push adds one or more elements to the end of an array.\n<br>- `pop`: array.pop removes the last element from an array and returns the removed element.\n<br>In the example below, try to push mode 'colors' to the array and also pop and see how the array behaves.",
      "status": "",
      "output": "<h3> 1. `push` and `pop`</h3>\n\n- `push`: array.push adds one or more elements to the end of an array.\n- `pop`: array.pop removes the last element from an array and returns the removed element.",
      "type": "html"
    },
    {
      "code": "let colors = [\"red\", \"blue\", \"green\"];\n\ncolors.push(\"yellow\"); // Adds \"yellow\" to the end\nshow(\"Updated Colors:\", colors); // Outputs: Updated Colors: [\"red\", \"blue\", \"green\", \"yellow\"]\n\nlet removedColor = colors.pop(); // Removes the last element (\"yellow\")\nshow(\"Removed Color:\", removedColor); // Outputs: Removed Color: yellow\n//Push purple color and check how the array shows\n\n\n//Pop purple color and and add black color\n\n\n\n",
      "status": "[1]<br><span style=\"font-size:8px\">5ms<span></span></span>",
      "output": "Updated Colors: [\n  \"red\",\n  \"blue\",\n  \"green\",\n  \"yellow\"\n] <br>Removed Color: yellow <br>",
      "type": "code"
    },
    {
      "code": "<h3>2. `shift` and `unshift`</h3>\n- `shift`: Removes the first element from an array.\n<br>- `unshift`: Adds one or more elements to the beginning of an array.\n<br>Below is an example of using `shift` and `unshift`. Please add code in lines 15 and 16 to get back the original array.",
      "status": "",
      "output": "<h3>2. `shift` and `unshift`</h3>\n- `shift`: Removes the first element from an array.\n<br>- `unshift`: Adds one or more elements to the beginning of an array.\n<br>Below is an example of using `shift` and `unshift`. Please add code in lines 15 and 16 to get back the original array.",
      "type": "html"
    },
    {
      "code": "let numbers = [2, 3, 4];\n\nnumbers.unshift(1); // Adds 1 to the beginning\nshow(\"Updated Numbers:\", numbers); // Outputs: Updated Numbers: [1, 2, 3, 4]\n\nlet removedNumber = numbers.shift(); // Removes the first element (1)\nshow(\"Removed Number:\", removedNumber); // Outputs: Removed Number: 1\n\n//Below we pop the last number using numbers.pop and add it at the start using numbers.unshift\nlet poppedNumber=numbers.pop()\nshow(\"Popped number:\",poppedNumber);\nnumbers.unshift(poppedNumber);\nshow(\"numbers after popping and unshifting:\",numbers) \n//Now remove the first number using shift and add it at the end using numbers.push. Write code below and test.\n\n\nshow(\"Testing.. numbers after shifting and pushing:\",numbers) \n//After you do the above steps, you should be back to original array of [2,3,4]",
      "status": "[11]<br><span style=\"font-size:8px\">8ms<span></span></span>",
      "output": "Updated Numbers: [\n  1,\n  2,\n  3,\n  4\n] <br>Removed Number: 1 <br>Popped number: 4 <br>numbers after popping and unshifting: [\n  4,\n  2,\n  3\n] <br>Testing.. numbers after shifting and pushing: [\n  4,\n  2,\n  3\n] <br>",
      "type": "code"
    },
    {
      "code": "<h3>3. `splice`</h3>\n- `splice`: Adds or removes elements from an array at a specified index.\n<br>For removing elements splice takes two parameters: start index and number of elements to remove. \n<br>For adding elements it takes the above paramters and a list of elements to be added. \n<br>In the example below, we removed second and third elements. We also replace them with three new elements.",
      "status": "",
      "output": "<h3>3. `splice`</h3>\n- `splice`: Adds or removes elements from an array at a specified index.\n<br>For removing elements splice takes two parameters: start index and number of elements to remove. \n<br>For adding elements it takes the above paramters and a list of elements to be added. \n<br>In the example below, we removed second and third elements. We also replace them with three new elements.",
      "type": "html"
    },
    {
      "code": "// Removing elements\nlet fruits = [\"apple\", \"banana\", \"orange\", \"grape\"];\nfruits.splice(1, 2);\nshow(\"Fruits after removal:\", fruits); // Outputs: Fruits after removal: [\"apple\", \"grape\"]\n\n// Adding elements\nfruits = [\"apple\", \"banana\", \"orange\", \"grape\"]; //reasigning values\nfruits.splice(1, 2, \"kiwi\", \"pear\",\"mango\"); \nshow(\"Fruits after addition:\", fruits); // Outputs: Fruits after addition: [\"apple\", \"kiwi\", \"pear\", \"grape\"]",
      "status": "[21]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Fruits after removal: [\n  \"apple\",\n  \"grape\"\n] <br>Fruits after addition: [\n  \"apple\",\n  \"kiwi\",\n  \"pear\",\n  \"mango\",\n  \"grape\"\n] <br>",
      "type": "code"
    },
    {
      "code": "<h3>4. `slice`</h3>\n\n- `slice`: Returns a narrow subset portion of an array into a new array.\n<br>For example in the above array in stead of removing the second and third element you want to just get the second and third element in an array you could use slice.\n<br>Slices takes two inputs: \n<br>1. Index of start element (note: array indices start at 0 in JavaScript)\n<br>2. Index of end element. End element is not included in the sliced array.\n<br>The original array is not modified. \nNote: while splice takes start index and number of elements as inputs, splice takes start and end indices of the array as inputs.",
      "status": "",
      "output": "<h3>4. `slice`</h3>\n\n- `slice`: Returns a narrow subset portion of an array into a new array.\n<br>For example in the above array in stead of removing the second and third element you want to just get the second and third element in an array you could use slice.\n<br>Slices takes two inputs: \n<br>1. Index of start element (note: array indices start at 0 in JavaScript)\n<br>2. Index of end element. End element is not included in the sliced array.\n<br>The original array is not modified. \nNote: while splice takes start index and number of elements as inputs, splice takes start and end indices of the array as inputs.",
      "type": "html"
    },
    {
      "code": "let fruits=[ \"apple\", \"kiwi\", \"pear\", \"mango\", \"grape\" ];\nshow(\"Original array before slicing:\",fruits);\nlet someFruits=fruits.slice(1,4);\nshow(\"Original array after slicing:\",fruits);\nshow(\"Sliced array:\",someFruits);",
      "status": "[32]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "Original array before slicing: [\n  \"apple\",\n  \"kiwi\",\n  \"pear\",\n  \"mango\",\n  \"grape\"\n] <br>Original array after slicing: [\n  \"apple\",\n  \"kiwi\",\n  \"pear\",\n  \"mango\",\n  \"grape\"\n] <br>Sliced array: [\n  \"kiwi\",\n  \"pear\",\n  \"mango\"\n] <br>",
      "type": "code"
    },
    {
      "code": "In the example below, there are two arrays. Each of them contains a list of names. \nCan you replace the second, third and fourth elements of second array with the second, third and fourth elements of the first array?",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "let array1=['Joss','John','Jay','Joe','Jeet'];\nlet array2=['Jane','Jill','Janu','Jassica','June'];\n//Step 1: get second, third, fourth elements of array1 using the functions `array.slice`\n\n//Step 2: insert these in place of second, third, and fourth elements of array2 using `array.splice`\n\n//Finally test if it worked:\nshow(array2)",
      "status": "[33]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "[\n  \"Jane\",\n  \"Jill\",\n  \"Janu\",\n  \"Jassica\",\n  \"June\"\n] <br>",
      "type": "code"
    },
    {
      "code": "<h3>5. `concat`</h3>\n- `concat`: Merges two or more arrays, returning a new array.\n<br>The original arrays are not modified.",
      "status": "",
      "output": "<h3>5. `concat`</h3>\n- `concat`: Merges two or more arrays, returning a new array.\n<br>The original arrays are not modified.",
      "type": "html"
    },
    {
      "code": "let arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\n\nlet mergedArray = arr1.concat(arr2);\nshow(\"Merged Array:\", mergedArray); ",
      "status": "[24]<br><span style=\"font-size:8px\">5ms<span></span></span>",
      "output": "Merged Array: [\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n] <br>",
      "type": "code"
    },
    {
      "code": "The array below has numbers from 1 to 10. Split them into two arrays of 1 to 5 and 5 to 10 using the function slice. \nThen combine them back to form the original array.\n",
      "status": "",
      "output": "The array below has numbers from 1 to 10. Split them into two arrays of 1 to 5 and 5 to 10 using the function slice. \nThen combine them back to form the original array.\n",
      "type": "html"
    },
    {
      "code": "let numbers=[1,2,3,4,5,6,7,8,9,10];\n//Step 1: get first five numbers in an array using slice\n\n//Step 2: get last five numbers in an array using slice\n\n//Step 3: concatenate them into an array\n\n//Finally, test if it worked by showing the array\n",
      "status": "",
      "output": "",
      "type": "code"
    },
    {
      "code": "<h3>6. `forEach`</h3>\n- `forEach`: Executes a provided function once for each array element.\n<br>This is useful for running loops. It is an alternative to `for` and `while` loops we learnt in <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\">lesson 3</a>. Please not that you can define the function inside the forEach brackets itself without a name. Or alternatively you can define it before with a name and use it inside fofEach.\n<br>The next two examples print numbers which are double of the numbers of an array.",
      "status": "",
      "output": "<h3>6. `forEach`</h3>\n- `forEach`: Executes a provided function once for each array element.\n<br>This is useful for running loops. It is an alternative to `for` and `while` loops we learnt in <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\">lesson 3</a>. Please not that you can define the function inside the forEach brackets itself without a name. Or alternatively you can define it before with a name and use it inside fofEach.\n<br>The next two examples print numbers which are double of the numbers of an array.",
      "type": "html"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\n\nnumbers.forEach(\n  function (num) {\n  show(num * 2); //Prints the doubled numbers\n}\n);\n\n",
      "status": "[37]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "2 <br>4 <br>6 <br>8 <br>10 <br>",
      "type": "code"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\n function double(num) {\n  show(num * 2); //Prints the doubled numbers\n}\nnumbers.forEach(double);\n",
      "status": "[38]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "2 <br>4 <br>6 <br>8 <br>10 <br>",
      "type": "code"
    },
    {
      "code": "In the code below lets calculate the sum of all elements of an array using forEach. \nPlease write the code inside the numbers.forEach block and test if it worked.",
      "status": "",
      "output": "",
      "type": "html"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\nlet sum=0;\nnumbers.forEach(function (num) {\n  /* Wrtie the code in the next line to update sum */\n});\n\nshow(\"Sum is:\",sum);\nif(sum==15){\n  show(\"It worked!!!\")\n}else{\n  show(\"Try again please\")\n}",
      "status": "[36]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Sum is: 0 <br>Try again please <br>",
      "type": "code"
    },
    {
      "code": "<h3>7. `map`</h3>\n- `map`: Creates a new array by applying a provided function to every element in the calling array.\n<br>`map` works similar to forEach, except that it returns a new array. The `map` method is powerful for transforming each element in an array based on a provided function. It returns a new array with the results, leaving the original array unchanged.\n\n<br>The example below doubles each number in the `numbers` array using the `map` method.",
      "status": "",
      "output": "<h3>7. `map`</h3>\n- `map`: Creates a new array by applying a provided function to every element in the calling array.\n<br>`map` works similar to forEach, except that it returns a new array. The `map` method is powerful for transforming each element in an array based on a provided function. It returns a new array with the results, leaving the original array unchanged.\n\n<br>The example below doubles each number in the `numbers` array using the `map` method.",
      "type": "html"
    },
    {
      "code": "// Doubling each element using map\nlet numbers = [1, 2, 3, 4, 5];\nlet doubledNumbers = numbers.map(\n  function(num) {\n  return num * 2;\n}\n);\n\nshow(\"Original Numbers:\", numbers); // Outputs: Original Numbers: [1, 2, 3, 4, 5]\nshow(\"Doubled Numbers:\", doubledNumbers); // Outputs: Doubled Numbers: [2, 4, 6, 8, 10]\n",
      "status": "[30]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Original Numbers: [\n  1,\n  2,\n  3,\n  4,\n  5\n] <br>Doubled Numbers: [\n  2,\n  4,\n  6,\n  8,\n  10\n] <br>",
      "type": "code"
    },
    {
      "code": "In the code below we want to check if each element is an even number. We have defined a function that checs if a number is even. \nUse it on the array 'numbers' and see if it works. Change the array to test the code.",
      "status": "",
      "output": "In the code below we want to check if each element is an even number. We have defined a function that checs if a number is even. \nUse it on the array 'numbers' and see if it works. Change the array to test the code.",
      "type": "html"
    },
    {
      "code": "function checkEven(num){\n  return num%2==0;\n}\nlet numbers=[1,2,3,4,5,6];\n//Use map to apply the checkEven function to each of the numbers in the above array and show the output\n",
      "status": "[41]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<h2>Nested Arrays and Objects</h2>\nIn JavaScript, arrays can contain elements of any data type, including other arrays. When an array contains another array as one of its elements, it's called a nested array. Nested arrays allow you to create multidimensional data structures, which can be useful for representing complex data or organizing related data.\n<pre>\n  let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n </pre>\nIn this example, matrix is a nested array containing three inner arrays, each representing a row of a matrix. This structure creates a two-dimensional array.\nTo access elements in a nested array, you use multiple square brackets to navigate through the levels of nesting. For example, to access the element 5 in the matrix array:\n<pre>\nlet number = matrix[1][1];\nconsole.log(number); // Outputs: 5\n</pre>\nYou can use nested loops to iterate over elements in a nested array. For example, to log all elements in the matrix array:",
      "status": "",
      "output": "<h2>Nested Arrays and Objects</h2>\nIn JavaScript, arrays can contain elements of any data type, including other arrays. When an array contains another array as one of its elements, it's called a nested array. Nested arrays allow you to create multidimensional data structures, which can be useful for representing complex data or organizing related data.\n<pre>  let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\n </pre>\nIn this example, matrix is a nested array containing three inner arrays, each representing a row of a matrix. This structure creates a two-dimensional array.\nTo access elements in a nested array, you use multiple square brackets to navigate through the levels of nesting. For example, to access the element 5 in the matrix array:\n<pre>let number = matrix[1][1];\nconsole.log(number); // Outputs: 5\n</pre>\nYou can use nested loops to iterate over elements in a nested array. For example, to log all elements in the matrix array:",
      "type": "html"
    },
    {
      "code": "let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n];\nmatrix.forEach(function (row){\n  row.forEach(function (num){\n\tshow(num);\n  })\n})",
      "status": "[44]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "1 <br>2 <br>3 <br>4 <br>5 <br>6 <br>7 <br>8 <br>9 <br>",
      "type": "code"
    },
    {
      "code": "\nThis nested loop iterates over each inner array (row) in the matrix array and then iterates over each element within thoserows, showing each element to the console. Nested arrays provide a flexible way to represent and work with multidimensional data structures in JavaScript, allowing for complex data organization and manipulation. \n",
      "status": "",
      "output": "\nThis nested loop iterates over each inner array (row) in the matrix array and then iterates over each element within thoserows, showing each element to the console. Nested arrays provide a flexible way to represent and work with multidimensional data structures in JavaScript, allowing for complex data organization and manipulation. \n",
      "type": "html"
    },
    {
      "code": "<h2>Complex Nested Structures</h2>\nAn array can also contain objects and vice-verse. For example in the code below, marks of students are stored as objects inside an array. One can loop through each student record and extract the marks.",
      "status": "",
      "output": "<h2>Complex Nested Structures</h2>\nAn array can also contain objects and vice-verse. For example in the code below, marks of students are stored as objects inside an array. One can loop through each student record and extract the marks.",
      "type": "html"
    },
    {
      "code": "let marksOfStudens=[\n  { english:100,maths:75,science:80},\n  { english:90,maths:85,science:75},\n  { english:80,maths:70,science:85}\n  ];\n\nlet englishMarks=[];\nmarksOfStudens.forEach(function(studentRecord){\n  englishMarks.push(studentRecord.english);\n})\n\nshow(\"English marks of students:\",englishMarks);\n//Why dont you print maths marks as science marks as well?",
      "status": "[50]<br><span style=\"font-size:8px\">4ms<span></span></span>",
      "output": "English marks of students: [\n  100,\n  90,\n  80\n] <br>",
      "type": "code"
    },
    {
      "code": "Like, objects inside and array, one can have arrays inside an object. \nFor example instead of storing marks of each student as a record in an array,\n  one can store marks of each student for a subject as property of an object. Below example shows this\n<pre>\nlet subjectMarks={\n  english:[100,90,80],\n  maths:[75,85,70],\n  science:[80,75,85]\n}\n</pre>\nThe previous structure (student wise records) can be coverted to this structure (object with subject-wise marks) by looping through the array:",
      "status": "",
      "output": "Like, objects inside and array, one can have arrays inside an object. \nFor example instead of storing marks of each student as a record in an array,\n  one can store marks of each student for a subject as property of an object. Below example shows this\n<pre>let subjectMarks={\n  english:[100,90,80],\n  maths:[75,85,70],\n  science:[80,75,85]\n}\n</pre>\nThe previous structure (student wise records) can be coverted to this structure (object with subject-wise marks) by looping through the array:",
      "type": "html"
    },
    {
      "code": "let subjectMarks={\nenglish:[], maths:[],science:[]\n};\nlet marksOfStudens=[\n  { english:100,maths:75,science:80},\n  { english:90,maths:85,science:75},\n  { english:80,maths:70,science:85}\n  ];\n\nmarksOfStudens.forEach(function (studentRecord){\n  subjectMarks.english.push(studentRecord.english);\n   subjectMarks.maths.push(studentRecord.maths);\n   subjectMarks.science.push(studentRecord.science);\n});\n\nshow(\"Subject-wise marks:\",subjectMarks);\n",
      "status": "[1]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "Subject-wise marks: {\n  \"english\": [\n    100,\n    90,\n    80\n  ],\n  \"maths\": [\n    75,\n    85,\n    70\n  ],\n  \"science\": [\n    80,\n    75,\n    85\n  ]\n} <br>",
      "type": "code"
    },
    {
      "code": "Further nesting is also possible, i.e one can have arrays/objects within arrays/objects within arrays/objects.. so on.. \nBut such complex structures are beyond the scope of this course.",
      "status": "",
      "output": "Further nesting is also possible, i.e one can have arrays/objects within arrays/objects within arrays/objects.. so on.. \nBut such complex structures are beyond the scope of this course.",
      "type": "html"
    },
    {
      "code": "<h2>Summary</h2>\n<ul>\n<li>Arrays are ordered lists that store multiple values.</li>\n<li>Array elements are accessed using indexes, and modifications can be made directly.</li>\n<li> JavaScript provides several built-in array methods for manipulation, such as `push`, `pop`, `shift`, `unshift`, `splice`, `slice`, `concat`, `forEach` and `map`.</li>\n<li>Utilizing array methods enhances code readability and efficiency.</li>\n</ul>\nIn the next few lessons, we'll explore more advanced JavaScript concepts, including asynchronous programming and working with the Document Object Model (DOM) to modify the HTML page dynamically. Stay tuned!\n\n",
      "status": "",
      "output": "<h2>Summary</h2>\n<ul>\n<li>Arrays are ordered lists that store multiple values.</li>\n<li>Array elements are accessed using indexes, and modifications can be made directly.</li>\n<li> JavaScript provides several built-in array methods for manipulation, such as `push`, `pop`, `shift`, `unshift`, `splice`, `slice`, `concat`, `forEach` and `map`.</li>\n<li>Utilizing array methods enhances code readability and efficiency.</li>\n</ul>\nIn the next few lessons, we'll explore more advanced JavaScript concepts, including asynchronous programming and working with the Document Object Model (DOM) to modify the HTML page dynamically. Stay tuned!\n\n",
      "type": "html"
    },
    {
      "code": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-4.jsnb\" target=\"_blank\">Lesson 4: Functions for Modular Code</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5: Objects</a></li>\n  \n  </ul>",
      "status": "",
      "output": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-4.jsnb\" target=\"_blank\">Lesson 4: Functions for Modular Code</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5: Objects</a></li>\n  \n  </ul>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}