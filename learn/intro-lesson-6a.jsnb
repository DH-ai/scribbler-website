{
  "metadata": {
    "name": "Lesson 6a: Arrays and Array Methods<br>",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1  style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "status": "",
      "output": "<div style=\"text-align:center;background-color:#fede02;color:#555;margin:-10px;margin-left:-20px;margin-right:-20px;\">\n\n        <br><h1 style=\"color:#555\">Learn Foundations of JavaScript in 10 Easy Lessons</h1>\n<p class=\"site-masthead__description mb-0\" style=\"color:#555\">\n        This is a course in foundations of JavaScript in 10 lessons with easy to use interactive workbooks.\n    </p><br></div>",
      "type": "html"
    },
    {
      "code": "<h1>Arrays and Array Methods: Lesson 6 (Part A) of 10</h1>",
      "status": "",
      "output": "<h1>Arrays and Array Methods: Lesson 6 (Part A) of 10</h1>",
      "type": "html"
    },
    {
      "code": "<h2> Overview</h2>\n\nIn <a href='https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb' target='_blank'>Lesson 5</a>, we explored objects and the dynamic nature of the `this` keyword within the context of objects. Now, let's shift our focus to arrays, which are versatile data structures that allow you to store and manipulate collections of values. Additionally, we'll delve into various array methods for efficient data manipulation.\n\n<h3>Introduction to Arrays</h3>\n\nArrays are ordered lists that can hold multiple values of different data types. They are created using square brackets `[]`.\n\n<pre>\nlet fruits = [\"Apple\", \"Banana\", \"Orange\"];\n</pre>\n\n<h3>Accessing and Modifying Array Elements</h3>\n\nArray elements are accessed using indexes, and modifications can be made directly to the elements. Index of arrays in JavaScript start at 0 (not 1). So the first element is index by 0. The next by 1, so on and so forth.\n<pre>\nlet firstFruit = fruits[0]; // Accessing the first element (index 0)\n\nfruits[1] = \"Grapes\"; // Modifying the second element\n</pre>\n<h3>Types of Elements</h3>\nArrays can contain any type of elements. They can have strings, numbers, null values, mixed types, objects, and even other arrays. The array below has mixed types if elements.\n<pre>\nlet marks = [50, 60, \"Unknown\", \"Absent\",100];\n</pre>\n<h3>Example</h3>\nIn the example below, try to modify the third element (referred by the index 2) to Grapes and then show it in the output. <br><b>Note:</b> `show` is a Scribbler function. in other environments you can use console.log.\n\n",
      "status": "",
      "output": "<h2> Overview</h2>\n\nIn <a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5</a>, we explored objects and the dynamic nature of the `this` keyword within the context of objects. Now, let's shift our focus to arrays, which are versatile data structures that allow you to store and manipulate collections of values. Additionally, we'll delve into various array methods for efficient data manipulation.\n\n<h3>Introduction to Arrays</h3>\n\nArrays are ordered lists that can hold multiple values of different data types. They are created using square brackets `[]`.\n\n<pre>let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n</pre>\n\n<h3>Accessing and Modifying Array Elements</h3>\n\nArray elements are accessed using indexes, and modifications can be made directly to the elements. Index of arrays in JavaScript start at 0 (not 1). So the first element is index by 0. The next by 1, so on and so forth.\n<pre>let firstFruit = fruits[0]; // Accessing the first element (index 0)\n\nfruits[1] = \"Grapes\"; // Modifying the second element\n</pre>\n<h3>Types of Elements</h3>\nArrays can contain any type of elements. They can have strings, numbers, null values, mixed types, objects, and even other arrays. The array below has mixed types if elements.\n<pre>let marks = [50, 60, \"Unknown\", \"Absent\",100];\n</pre>\n<h3>Example</h3>\nIn the example below, try to modify the third element (referred by the index 2) to Grapes and then show it in the output. <br><b>Note:</b> `show` is a Scribbler function. in other environments you can use console.log.\n\n",
      "type": "html"
    },
    {
      "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\nlet firstFruit = fruits[0]; // Accessing the first element (index 0)\nconsole.log(\"First Fruit:\", firstFruit); // Outputs: First Fruit: Apple\nshow(firstFruit)\nfruits[1] = \"Grapes\"; // Modifying the second element\nshow(\"Updated Fruits:\", fruits); // Outputs: Updated Fruits: [\"Apple\", \"Grapes\", \"Orange\"]\n/* Write your code below to update last fruit and show it */\n",
      "status": "[16]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "Apple <br>Updated Fruits: [\n  \"Apple\",\n  \"Grapes\",\n  \"Orange\"\n] <br>",
      "type": "code"
    },
    {
      "code": "In the cell below, we have created a function to check if the first element and second element are same or not. Try changing the array to see if it works properly for all scenarios.",
      "status": "",
      "output": "In the cell below, we have created a function to check if the first element and second element are same or not. Try changing the array to see if it works properly for all scenarios.",
      "type": "html"
    },
    {
      "code": "function compareFirstTwoElements(myArray){\n  if (myArray[0]==myArray[1]){\n\tshow(\"They are the same\");\n  }else{\n\tshow(\"They are not the same\");\n  }\n}\nlet testArray = [1,1];\ncompareFirstTwoElements(testArray);\n//Test this code by changing the testArray to following values:\n//[1,2]\n//['a','b']\n//['a','a']\n//['a','a','b']\n//[1,'1']\n//[1,'2',3]",
      "status": "[17]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "They are the same <br>",
      "type": "code"
    },
    {
      "code": "<h2>Array Methods</h2>\n\nJavaScript provides a variety of built-in methods for working with arrays. Let's explore some of these methods:\n<ol>\n<li>`push` and `pop` for adding and removing elements at the end</li>\n<li>`unshift` and `shift` for adding and removing elements at the start</li>\n<li>`concat` for merging two arrays</li>\n<li>`forEach` for executing a function on each element of the array</li>\n<li>`splice` for adding and removing elements at the a specific position</li>\n<li>`slice` for getting a sub-segment of an array</li>\n\n<li>`map` for creating a new array after applying a function on each element</li>\n\n</ol>\nLet us look at these in more detail with examples. Methods 1 to 4 are covered in this part of the lesson, rest of the methods and more advanced array concepts are covered in <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Lesson 6 - Part B</a>.",
      "status": "",
      "output": "<h2>Array Methods</h2>\n\nJavaScript provides a variety of built-in methods for working with arrays. Let's explore some of these methods:\n<ol>\n<li>`push` and `pop` for adding and removing elements at the end</li>\n<li>`unshift` and `shift` for adding and removing elements at the start</li>\n<li>`concat` for merging two arrays</li>\n<li>`forEach` for executing a function on each element of the array</li>\n<li>`splice` for adding and removing elements at the a specific position</li>\n<li>`slice` for getting a sub-segment of an array</li>\n\n<li>`map` for creating a new array after applying a function on each element</li>\n\n</ol>\nLet us look at these in more detail with examples. Methods 1 to 4 are covered in this part of the lesson, rest of the methods and more advanced array concepts are covered in <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Lesson 6 - Part B</a>.",
      "type": "html"
    },
    {
      "code": "<h3> 1. `push` and `pop`</h3>\n\n- `push`: array.push adds one or more elements to the end of an array.\n<br>- `pop`: array.pop removes the last element from an array and returns the removed element.\n<br>In the example below, try to push mode 'colors' to the array and also pop and see how the array behaves.",
      "status": "",
      "output": "<h3> 1. `push` and `pop`</h3>\n\n- `push`: array.push adds one or more elements to the end of an array.\n<br>- `pop`: array.pop removes the last element from an array and returns the removed element.\n<br>In the example below, try to push mode 'colors' to the array and also pop and see how the array behaves.",
      "type": "html"
    },
    {
      "code": "let colors = [\"red\", \"blue\", \"green\"];\n\ncolors.push(\"yellow\"); // Adds \"yellow\" to the end\nshow(\"Updated Colors:\", colors); // Outputs: Updated Colors: [\"red\", \"blue\", \"green\", \"yellow\"]\n\nlet removedColor = colors.pop(); // Removes the last element (\"yellow\")\nshow(\"Removed Color:\", removedColor); // Outputs: Removed Color: yellow\n",
      "status": "[18]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Updated Colors: [\n  \"red\",\n  \"blue\",\n  \"green\",\n  \"yellow\"\n] <br>Removed Color: yellow <br>",
      "type": "code"
    },
    {
      "code": "<h3>Experiment with push and pop</h3>\n  Try popping and color and adding another color in the cell below.",
      "status": "",
      "output": "<h3>Experiment with push and pop</h3>\n  Try popping and color and adding another color in the cell below.",
      "type": "html"
    },
    {
      "code": "let colors = [\"red\", \"blue\", \"green\"];\n//Pop the last color and check how the array shows\n\nshow(\"colors after  popping a color\",colors) //This should show [\"red\",\"blue\"]\n//Push purple color and check how the array shows\n\n\nshow(\"colors after pushing purple\",colors) //This should show [\"red\",\"blue\",\"purple\"]",
      "status": "[19]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "colors after  popping a color [\n  \"red\",\n  \"blue\",\n  \"green\"\n] <br>colors after pushing purple [\n  \"red\",\n  \"blue\",\n  \"green\"\n] <br>",
      "type": "code"
    },
    {
      "code": "In the code below we will run through numbers from 1 to 10 and push all numbers that are even in an array. \nThis uses the reminder operator `%` and also a for loop we learnt in \n  <a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\"> lesson 3</a>. <br><b>Can you change the code to make a list of odd numbers?</b>",
      "status": "",
      "output": "In the code below we will run through numbers from 1 to 10 and push all numbers that are even in an array. \nThis uses the reminder operator `%` and also a for loop we learnt in \n  <a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\"> lesson 3</a>. <br><b>Can you change the code to make a list of odd numbers?</b>",
      "type": "html"
    },
    {
      "code": "let evens=[];\nfor(let num=1;num<=10;num=num+1){\n  if(num % 2==0){\n\tevens.push(num);\n  }\n}\nshow(\"Even numbers:\",evens)",
      "status": "[20]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Even numbers: [\n  2,\n  4,\n  6,\n  8,\n  10\n] <br>",
      "type": "code"
    },
    {
      "code": "<h3>2. `shift` and `unshift`</h3>\n`push` and `pop` add an element or remove and element from the end of the array. `unshift` and `shift` do the same at the start of the array.\n<br>- `unshift`: Adds one or more elements to the beginning of an array. This increases the size of the array.\n<br>- `shift`: Removes the first element from an array. This reduces the size of the array.\n<br>Below is an example of using `shift` and `unshift`. ",
      "status": "",
      "output": "<h3>2. `shift` and `unshift`</h3>\n`push` and `pop` add an element or remove and element from the end of the array. `unshift` and `shift` do the same at the start of the array.\n<br>- `unshift`: Adds one or more elements to the beginning of an array. This increases the size of the array.\n<br>- `shift`: Removes the first element from an array. This reduces the size of the array.\n<br>Below is an example of using `shift` and `unshift`. ",
      "type": "html"
    },
    {
      "code": "let numbers = [2, 3, 4];\n\nnumbers.unshift(1); // Adds 1 to the beginning\nshow(\"Updated Numbers:\", numbers); // Outputs: Updated Numbers: [1, 2, 3, 4]\n\nlet removedNumber = numbers.shift(); // Removes the first element (1)\nshow(\"Removed Number:\", removedNumber); // Outputs: Removed Number: 1",
      "status": "[21]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Updated Numbers: [\n  1,\n  2,\n  3,\n  4\n] <br>Removed Number: 1 <br>",
      "type": "code"
    },
    {
      "code": "<h3>Combining push/pop with shift/unshift</h3>\nBelow we pop the last number using numbers.pop and add it at the start using numbers.unshift(). Can you add code below it to shift the array and add the shifted number at the back of the array using push? Please add code in lines 7 and 8. This should recover original array.",
      "status": "",
      "output": "<h3>Combining push/pop with shift/unshift</h3>\nBelow we pop the last number using numbers.pop and add it at the start using numbers.unshift(). Can you add code below it to shift the array and add the shifted number at the back of the array using push? Please add code in lines 7 and 8. This should recover original array.",
      "type": "html"
    },
    {
      "code": "let numbers = [2, 3, 4];\nlet poppedNumber=numbers.pop()\nshow(\"Popped number:\",poppedNumber);\nnumbers.unshift(poppedNumber);\nshow(\"numbers after popping and unshifting:\",numbers) \n//Now remove the first number using shift and add it at the end using numbers.push. Write code below and test.\n\n\nshow(\"Testing.. numbers after shifting and pushing:\",numbers) \n//After you do the above steps, you should be back to original array of [2,3,4]",
      "status": "[22]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "Popped number: 4 <br>numbers after popping and unshifting: [\n  4,\n  2,\n  3\n] <br>Testing.. numbers after shifting and pushing: [\n  4,\n  2,\n  3\n] <br>",
      "type": "code"
    },
    {
      "code": "<h3>3. `concat`</h3>\n- `concat`: Merges two or more arrays, returning a new array.\n<br>The original arrays are not modified.",
      "status": "",
      "output": "<h3>3. `concat`</h3>\n- `concat`: Merges two or more arrays, returning a new array.\n<br>The original arrays are not modified.",
      "type": "html"
    },
    {
      "code": "let arr1 = [1, 2, 3];\nlet arr2 = [4, 5, 6];\n\nlet mergedArray = arr1.concat(arr2);\nshow(\"Merged Array:\", mergedArray); ",
      "status": "[23]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Merged Array: [\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n] <br>",
      "type": "code"
    },
    {
      "code": "<h3>4. `forEach`</h3>\n- `forEach`: Executes a provided function once for each array element.\n<br>This is useful for running loops. It is an alternative to `for` and `while` loops we learnt in <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\">lesson 3</a>. Please not that you can define the function inside the forEach brackets itself without a name. Or alternatively you can define it before with a name and use it inside forEach.\n<br>The next two examples print numbers which are double of the numbers of an array.",
      "status": "",
      "output": "<h3>4. `forEach`</h3>\n- `forEach`: Executes a provided function once for each array element.\n<br>This is useful for running loops. It is an alternative to `for` and `while` loops we learnt in <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-3.jsnb\" target=\"_blank\">lesson 3</a>. Please not that you can define the function inside the forEach brackets itself without a name. Or alternatively you can define it before with a name and use it inside forEach.\n<br>The next two examples print numbers which are double of the numbers of an array.",
      "type": "html"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\n\nnumbers.forEach(\n  function (num) {\n  show(num * 2); //Prints the doubled numbers\n}\n);\n\n",
      "status": "[24]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "2 <br>4 <br>6 <br>8 <br>10 <br>",
      "type": "code"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\n function double(num) {\n  show(num * 2); //Prints the doubled numbers\n}\nnumbers.forEach(double);\n",
      "status": "[25]<br><span style=\"font-size:8px\">3ms<span></span></span>",
      "output": "2 <br>4 <br>6 <br>8 <br>10 <br>",
      "type": "code"
    },
    {
      "code": "In the code below let us calculate the sum of all elements of an array using forEach. \nPlease write the code inside the numbers.forEach block (in line number 5) and test if it worked.",
      "status": "",
      "output": "In the code below let us calculate the sum of all elements of an array using forEach. \nPlease write the code inside the numbers.forEach block and test if it worked.",
      "type": "html"
    },
    {
      "code": "let numbers = [1, 2, 3, 4, 5];\nlet sum=0;\nnumbers.forEach(function (num) {\n  /* Write the code in the next line to update sum */\n  \n});\n\nshow(\"Sum is:\",sum);\nif(sum==15){\n  show(\"It worked!!!\")\n}else{\n  show(\"Try again please\")\n}",
      "status": "[28]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "Sum is: 0 <br>Try again please <br>",
      "type": "code"
    },
    {
      "code": "<h2>Summary</h2>\n<ul>\n<li>Arrays are ordered lists that store multiple values.</li>\n<li>Array elements are accessed using indexes, and modifications can be made directly.</li>\n<li> JavaScript provides several built-in array methods for manipulation, such as `push`, `pop`, `shift`, `unshift`, `splice`, `slice`, `concat`, `forEach` and `map`.</li>\n<li>Utilizing array methods enhances code readability and efficiency.</li>\n</ul>\nIn the next part of the <a href='https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-6b.jsnb' target='_blank'>Lesson 6<a> we will cover rest of the array methods and nested arrays.\n\n",
      "status": "",
      "output": "<h2>Summary</h2>\n<ul>\n<li>Arrays are ordered lists that store multiple values.</li>\n<li>Array elements are accessed using indexes, and modifications can be made directly.</li>\n<li> JavaScript provides several built-in array methods for manipulation, such as `push`, `pop`, `shift`, `unshift`, `splice`, `slice`, `concat`, `forEach` and `map`.</li>\n<li>Utilizing array methods enhances code readability and efficiency.</li>\n</ul>\nIn the next part of the <a href=\"https://app.scribbler.live/#https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Lesson 6</a><a> we will cover rest of the array methods and nested arrays.\n\n</a>",
      "type": "html"
    },
    {
      "code": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Next Part of Lesson 6</a></li>\n  \n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-4.jsnb\" target=\"_blank\">Lesson 4: Functions for Modular Code</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5: Objects</a></li>\n  \n  </ul>",
      "status": "",
      "output": "<h2>Learn More</h2>\n<ul>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-6b.jsnb\" target=\"_blank\">Next Part of Lesson 6</a></li>\n  \n  <li><a href=\"https://app.scribbler.live#\" target=\"_blank\">Blank Notebook for Experimentation</a></li>\n  <li><a href=\"https://scribbler.live/learn\" target=\"_blank\">Back to Course Contents</a></li>\n<li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-4.jsnb\" target=\"_blank\">Lesson 4: Functions for Modular Code</a></li>\n  <li><a href=\"https://app.scribbler.live/?jsnb=https://scribbler.live/learn/intro-lesson-5.jsnb\" target=\"_blank\">Lesson 5: Objects</a></li>\n  \n  </ul>",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}